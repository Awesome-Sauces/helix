syntax = "proto3";

package network;

message TResult {
    required int32 exit_code = 1;
    required string result = 2;
}

message CResult {
    required int32 exit_code = 1;
    required string result = 2;
}

message Transaction {
    required string sender = 1;
    required string receiver = 2;

    required int64 tx_sequence = 3;
    required string type = 4;
    required string payload = 5; // XDR Encoded -> String
    required string hash = 6; // tx_sequence+type+payload(xdr)
    required string signature = 7; // signature of hash
}

message TransactionID {
    required string hash = 1;
    required int64 tx_sequence = 2;
}

message ContractInteract {
    required string contract_id = 1;// The hash of the contract bytecode
    required string submitter = 2; // address
    required bytes  arguments = 3; // A small piece of bytecode that will be ran prior to running the contract bytecode. The result of this will be accessible by the contract.
    required string signature = 4; // Signature of the contract_id + arguments
}

service TransactionHandler {
    rpc SubmitTransaction(Transaction) returns (TResult);
    rpc VerifyTransaction(TransactionID) returns (TResult); // Requires transaction 
}

service ContractHandler {
    rpc CallContract(ContractInteract) return (CResult);
    rpc VerifyContract(string) return (CResult);
}